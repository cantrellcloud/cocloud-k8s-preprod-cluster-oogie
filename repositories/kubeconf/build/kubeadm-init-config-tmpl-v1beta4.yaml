apiVersion: kubeadm.k8s.io/v1beta4
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: "${KUBECONF_TOKEN}"
  ttl: 24h0m0s
  usages:
  - signing
  - authentication
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: ${KUBECONF_API_IP_1}
  bindPort: 6443
nodeRegistration:
  imagePullPolicy: IfNotPresent
  imagePullSerial: true
  name: ${KUBECONF_API_NODE_NAME_1}
  taints:
  - effect: NoSchedule
    key: node-role.kubernetes.io/control-plane
---
apiServer:
  certSANs:
  - ${KUBECONF_API_ENDPOINT_INTERNAL}
  - ${KUBECONF_API_ENDPOINT_EXTERNAL}
apiVersion: kubeadm.k8s.io/v1beta4
certificatesDir: ${KUBECONF_PKI_HOMEDIR}
clusterName: ${KUBECONF_CLUSTER_NAME}
controlPlaneEndpoint: ${KUBECONF_API_ENDPOINT_EXTERNAL}:6443
controllerManager: {}
dns: {}
encryptionAlgorithm: ${KUBECONF_PKI_ALGORITHM}
etcd:
  local:
    dataDir: /var/lib/etcd
imageRepository: ${KUBECONF_K8S_IMAGE_REPO}
kind: ClusterConfiguration
kubernetesVersion: ${KUBECONF_K8S_VERSION}
networking:
  dnsDomain: ${KUBECONF_DNS_DOMAIN}
  podSubnet: ${KUBECONF_POD_SUBNET}
  serviceSubnet: ${KUBECONF_SERVICE_SUBNET}
proxy: {}
scheduler: {}
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
mode: "ipvs"
ipvs:
  strictARP: true
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
enableControllerAttachDetach: false
---
